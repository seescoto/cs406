# testing that PRG in util is (relatively) indistinguishable from random (using random package)
import util
import random


def genRandomArray(n):
    # generates a random array of n integers 0 - 255
    return [random.randint(0, 255) for _ in range(n)]


def runningAvg(val, n, prevAvg=0):
    # welford's algorithm for computing running average without storing any values or sum
    # https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm
    return (prevAvg + (val - prevAvg)/n)


def getRange(arr):
    # returns range of values in arr
    low = arr[0]
    high = arr[0]
    for i in arr:
        low = min(low, i)
        high = max(high, i)
    return high - low


def getAvg(arr):
    # returns avg of values in arr
    return (sum(arr)/len(arr))


def test(tests, arrLength):
    meanPRG = 0
    meanRand = 0
    rangePRG = 0
    rangeRand = 0
    for i in range(1, tests+1):
        # random array of length arrLength
        randArr = genRandomArray(arrLength)
        meanRand = runningAvg(getAvg(randArr), i, meanRand)
        rangeRand = runningAvg(getRange(randArr), i, rangeRand)

        # array of length arrLength generated by prg in util
        prgArr = util.PRG(genRandomArray(arrLength//2))
        meanPRG = runningAvg(getAvg(prgArr), i, meanPRG)
        rangePRG = runningAvg(getRange(prgArr), i, rangePRG)

    print("mean of PRG generated array: \t\t\t" + str(meanPRG))
    print("mean of randomly generated array: \t\t" + str(meanRand))
    print("avg. range of PRG generated array: \t\t" + str(rangePRG))
    print("avg. range of randly generated array: \t\t" + str(rangeRand))


# test(10000, 100)
"""
results of test(10000, 100) = 

mean of PRG generated array:                    127.46439600000036
mean of randomly generated array:               127.44039299999964
avg. range of PRG generated array:              250.26089999999982
avg. range of randly generated array:           250.8373999999999

Summary results are very similar for both randomly generated array using random package (tested PRG) and 
my own prg (non-tested) and look indistinuishable (though range of randomly generated is slightly higher). 
Because no PRG has been proven to be secure, this is probably the best test of reliability for the randomness 
we can get.
"""
