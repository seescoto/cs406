# testing that PRF in util is (relatively) indistinguishable from random (using random package)
from src import util
import randomFunctions as rf 

def test(tests, kLength, xLength):
    meanPRF = 0
    meanRand = 0
    rangePRF = 0
    rangeRand = 0
    for i in range(1, tests+1):
        # random array of length kLength
        randArr = rf.genRandomIntArray(kLength)
        meanRand = rf.runningAvg(rf.getAvg(randArr), i, meanRand)
        rangeRand = rf.runningAvg(rf.getRange(randArr), i, rangeRand)

        # array of length kLength generated by prf(k, x)
        k = rf.genRandomString(kLength) 
        x = rf.genRandomString(xLength)
        prfArr = util.PRF(k, x)
        meanPRF = rf.runningAvg(rf.getAvg(prfArr), i, meanPRF)
        rangePRF = rf.runningAvg(rf.getRange(prfArr), i, rangePRF)

    print("mean of PRF generated array: \t\t\t" + str(meanPRF))
    print("mean of randomly generated array: \t\t" + str(meanRand))
    print("avg. range of PRF generated array: \t\t" + str(rangePRF))
    print("avg. range of randomly generated array: \t" + str(rangeRand))

if __name__ == '__main__':
    test(25000, 100, 5)
    # xLength = 5 means binary tree only has height 5, which is what impacts timing the most

"""
results = 

mean of PRF generated array:                    127.49657440000011
mean of randomly generated array:               127.55535079999967
avg. range of PRF generated array:              250.49120000000067
avg. range of randomly generated array:         250.86671999999928

Summary results are very similar for both randomly generated array using random package (tested PRG) and 
my own prf (non-tested) and look indistinuishable (though range and mean of randomly generated is slightly higher). 
A PRF based on a secure PRG is proven to be secure, but since no PRG can be proven to be secure I thought I 
would test the PRF as well.
"""