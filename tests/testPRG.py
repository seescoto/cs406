# testing that PRG in util is (relatively) indistinguishable from random (using random package)
import random
from src import util


def genRandomArray(n):
    # generates a random array of n integers 0 - 255
    return [random.randint(0, 255) for _ in range(n)]


def runningAvg(val, n, prevAvg=0):
    # welford's algorithm for computing running average without storing any values or sum
    # https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance#Welford's_online_algorithm
    return (prevAvg + (val - prevAvg)/n)


def getRange(arr):
    # returns range of values in arr
    low = arr[0]
    high = arr[0]
    for i in arr:
        low = min(low, i)
        high = max(high, i)
    return high - low


def getAvg(arr):
    # returns avg of values in arr
    return (sum(arr)/len(arr))


def test(tests, arrLength):
    meanPRG = 0
    meanRand = 0
    rangePRG = 0
    rangeRand = 0
    for i in range(1, tests+1):
        # random array of length arrLength
        randArr = genRandomArray(arrLength)
        meanRand = runningAvg(getAvg(randArr), i, meanRand)
        rangeRand = runningAvg(getRange(randArr), i, rangeRand)

        # array of length arrLength generated by prg in util
        prgArr = util.PRG(genRandomArray(arrLength//2))
        meanPRG = runningAvg(getAvg(prgArr), i, meanPRG)
        rangePRG = runningAvg(getRange(prgArr), i, rangePRG)

    print("mean of PRG generated array: \t\t\t" + str(meanPRG))
    print("mean of randomly generated array: \t\t" + str(meanRand))
    print("avg. range of PRG generated array: \t\t" + str(rangePRG))
    print("avg. range of randomly generated array: \t" + str(rangeRand))


if __name__ == '__main__':
    test(50000, 100)

"""
results = 

mean of PRG generated array:                    127.52592759999985
mean of randomly generated array:               127.53594820000045
avg. range of PRG generated array:              250.20755999999923
avg. range of randomly generated array:         250.85752000000087

Summary results are very similar for both randomly generated array using random package (tested PRG) and 
my own prg (non-tested) and look indistinuishable (though range of randomly generated is slightly higher). 
Because no PRG has been proven to be secure, this seems like a sufficient test of reliability for the randomness 
we can get.
"""
